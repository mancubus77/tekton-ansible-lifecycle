---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: buildah
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: image-build
spec:
  description: >-
    Buildah task builds source into a container image and
    then pushes it to a container registry.
    The task customize Red Hat base image and adds inventories
  params:
  - name: IMAGE
    description: Reference of the image buildah will produce.
  - name: BUILDER_IMAGE
    description: The location of the buildah builder image.
    default: quay.io/buildah/stable:v1.15.1
  - name: STORAGE_DRIVER
    description: Set buildah storage driver
    default: overlay
  - name: DOCKERFILE
    description: Path to the Dockerfile to build.
    default: ./Dockerfile
  - name: CONTEXT
    description: Path to the directory to use as context.
    default: .
  - name: TLSVERIFY
    description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
    default: "false"
  - name: FORMAT
    description: The format of the built container, oci or docker
    default: "oci"
  - name: BUILD_EXTRA_ARGS
    description: Extra parameters passed for the build command when building images.
    default: ""
  - name: INSTALL_AFTER_BUILD
    description: Extra parameters passed for the build command when building images.
    default: ""
  - name: PUSH_EXTRA_ARGS
    description: Extra parameters passed for the push command when pushing images.
    type: string
    default: ""
  workspaces:
  - name: source

  results:
  - name: IMAGE_DIGEST
    description: Digest of the image just built.

  steps:
  - name: build
    image: $(params.BUILDER_IMAGE)
    workingDir: $(workspaces.source.path)
    script: |
      echo "Pulling image"
      buildah pull --tls-verify=false image-registry.openshift-image-registry.svc:5000/tower/ansible-tower-rhel7:$(params.IMAGE)
      echo "Retag image"
      buildah tag image-registry.openshift-image-registry.svc:5000/tower/ansible-tower-rhel7:$(params.IMAGE) tower-venv:$(params.IMAGE)
      echo "Prepating image..."
      ctl=$(buildah from tower-venv:$(params.IMAGE))
      echo "Mounting container for chroot"
      mnt=$(buildah mount $ctl)
      echo "Copying enventories"
      cp -rf . $mnt/tmp/tmp-files/; rm -rf $mnt/tmp/tmp-files/.git
      execfile=$mnt/tmp/runner
      echo "Generating exec file"
      cat <<EOF > $execfile
      #!/usr/bin/bash
      set -m
      cd /tmp/tmp-files/
      dirs=\$(ls)
      for d in \$dirs; do
        echo \$d
        /usr/bin/python3 -m venv /var/lib/awx/venv/\$d
        source /var/lib/awx/venv/\$d/bin/activate
        python3 -m pip install --upgrade pip
        pip install -r /tmp/tmp-files/\$d/requirements.txt
      done
      EOF
      buildah run --user root $ctl -- bash /tmp/runner; rm -rf /tmp/runner; rm -rf /tmp/tmp-files/
      buildah commit --rm $ctl tower-venv:$(params.IMAGE)
    volumeMounts:
    - name: varlibcontainers
      mountPath: /var/lib/containers
    securityContext:
      privileged: true

  - name: push
    image: $(params.BUILDER_IMAGE)
    workingDir: $(workspaces.source.path)
    script: |
      buildah --storage-driver=$(params.STORAGE_DRIVER) push \
        $(params.PUSH_EXTRA_ARGS) --tls-verify=false \
        --digestfile $(workspaces.source.path)/image-digest tower-venv:$(params.IMAGE) \
        docker://image-registry.openshift-image-registry.svc:5000/$(context.taskRun.namespace)/tower-venv:$(params.IMAGE)
    volumeMounts:
    - name: varlibcontainers
      mountPath: /var/lib/containers
    securityContext:
      privileged: true


#
#  - name: run
#    image: $(params.BUILDER_IMAGE)
#    workingDir: $(workspaces.source.path)
#    script: |
#      image=$(buildah from $(params.IMAGE)) \
#      && buildah --storage-driver=$(params.STORAGE_DRIVER) run $image -- dnf -y install $(params.INSTALL_AFTER_BUILD) \
#      && buildah commit --rm $image $(params.IMAGE)
#    volumeMounts:
#    - name: varlibcontainers
#      mountPath: /var/lib/containers
#    securityContext:
#      privileged: true
#
#  - name: push
#    image: $(params.BUILDER_IMAGE)
#    workingDir: $(workspaces.source.path)
#    script: |
#      buildah --storage-driver=$(params.STORAGE_DRIVER) push \
#        $(params.PUSH_EXTRA_ARGS) --tls-verify=$(params.TLSVERIFY) \
#        --digestfile $(workspaces.source.path)/image-digest $(params.IMAGE) \
#        docker://$(params.IMAGE)
#    volumeMounts:
#    - name: varlibcontainers
#      mountPath: /var/lib/containers
#    securityContext:
#      privileged: true
#
#  - name: digest-to-results
#    image: $(params.BUILDER_IMAGE)
#    script: cat $(workspaces.source.path)/image-digest | tee /tekton/results/IMAGE_DIGEST

  volumes:
  - name: varlibcontainers
    emptyDir: {}
